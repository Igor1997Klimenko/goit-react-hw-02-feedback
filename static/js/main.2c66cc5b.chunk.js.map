{"version":3,"sources":["components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positive","index","Section","title","children","className","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Notification","message","App","state","addFeedback","setState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","this","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAsBeA,EApBI,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MACtD,OACI,+BACI,uCAAUL,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,2CAAcC,EAAd,SALKC,ICWFC,EAdC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACrB,OACI,qCACA,oBAAIC,UAAU,QAAd,SAAuBF,IACtBC,MCeME,EAlBS,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBAC/B,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACrB,wBACIC,KAAO,SACPN,UAAY,SAEZO,QAAW,kBAAMJ,EAAgBE,IAJrC,SAMKA,GAHMA,OCGJG,EARM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAO,4BAAIA,KCGTC,E,4MACJC,MAAQ,CACNpB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPmB,YAAc,SAAAP,GACZ,EAAKQ,UAAS,SAAAF,GAAK,sBAChBN,EAASM,EAAMN,GAAU,O,EAI9BS,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAKb,GAAN,OAAiBa,EAAMb,IAAQ,I,EAGzEc,gCAAkC,WAChC,IAAO5B,EAAQ,EAAKoB,MAAbpB,KACP,OAAO6B,KAAKC,MAAO9B,EAAO,EAAKuB,qBAAwB,MAAQ,G,4CAGjE,WACE,MAA6BQ,KAAKX,MAA3BpB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,IACtB,OACE,qCACA,cAAC,EAAD,CAASK,MAAO,wBAAhB,SACA,cAAC,EAAD,CACEI,QAASa,OAAOQ,KAAKD,KAAKX,OAC1BR,gBAAiBmB,KAAKV,gBAIxB,cAAC,EAAD,CAASd,MAAM,aAAf,SACCwB,KAAKR,qBACJ,cAAC,EAAD,CACAvB,KAAQA,EACRC,QAAWA,EACXC,IAAOA,EACPC,MAAS4B,KAAKR,qBACdnB,SAAY2B,KAAKH,oCAGjB,cAAC,EAAD,CAAcV,QAAQ,gC,GA3CZe,aAmDHd,ICpDfe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2c66cc5b.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst Statistics = ({good, neutral, bad, total, positive, index}) => {\r\n    return(\r\n        <ul key={index}>\r\n            <li>Good:{good}</li>\r\n            <li>Neutral:{neutral}</li>\r\n            <li>Bad:{bad}</li>\r\n            <li>Total:{total}</li>\r\n            <li>Positive:{positive}%</li>\r\n        </ul>       \r\n    )\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positive: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Statistics","import PropTypes from 'prop-types'\r\nconst Section = ({title, children}) => {\r\n    return(\r\n        <>\r\n        <h2 className=\"title\">{title}</h2>\r\n        {children}\r\n        </>\r\n    );\r\n}\r\n\r\nSection.propTypes = {\r\n    title:PropTypes.string.isRequired,\r\n    children:PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section","import PropTypes from 'prop-types'\r\n\r\nconst FeedbackOptions = ({options, onLeaveFeedback}) => {\r\n    return options.map(option =>(\r\n        <button\r\n            type = \"button\"\r\n            className = \"button\"\r\n            key = {option}\r\n            onClick = {() => onLeaveFeedback(option)}\r\n        >\r\n            {option}\r\n        </button>\r\n    ))\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default FeedbackOptions","import PropTypes from 'prop-types'\r\n\r\nconst Notification = ({message}) => {\r\n    return <p>{message}</p>\r\n}\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Notification","import {Component} from 'react'\nimport Statistics from './components/Statistics/Statistics';\nimport Section from './components/Section/Section'\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions'\nimport Notification from './components/Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addFeedback = option => {\n    this.setState(state =>({\n      [option]: state[option] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, option) => acc + option, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const {good} = this.state;\n    return Math.round((good / this.countTotalFeedback()) * 100) || 0;\n  };\n\n  render() {\n    const {good, neutral, bad} = this.state\n    return(\n      <>\n      <Section title= \"Please Leave feedback\">\n      <FeedbackOptions\n        options={Object.keys(this.state)}\n        onLeaveFeedback={this.addFeedback}\n      />\n      </Section>\n\n      <Section title=\"Statistics\">\n      {this.countTotalFeedback() ? (\n        <Statistics\n        good = {good}\n        neutral = {neutral}\n        bad = {bad}\n        total = {this.countTotalFeedback()}\n        positive = {this.countPositiveFeedbackPercentage()}\n        />\n      ) : (\n        <Notification message=\"No feedback griven\" />\n      )}\n      </Section>\n      </>\n    );\n  } \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n"],"sourceRoot":""}